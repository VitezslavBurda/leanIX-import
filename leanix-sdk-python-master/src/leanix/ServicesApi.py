#!/usr/bin/env python
"""
The MIT License (MIT)

Copyright (c) 2017 LeanIX GmbH

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from models import *


class ServicesApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    

    def getServices(self, **kwargs):
        """
        Read all Application

        Args:
            relations, bool: If set to true, all relations of the Fact Sheet are fetched as well. Fetching all relations can be slower. Default: false. (optional)

            filter, str: Full-text filter (optional)

            

        Returns: Array[Service]
        """

        allParams = ['relations', 'filter']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getServices" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('relations' in params):
            queryParams['relations'] = self.apiClient.toPathValue(params['relations'])
        if ('filter' in params):
            queryParams['filter'] = self.apiClient.toPathValue(params['filter'])
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[Service]')
        return responseObject
        

        

    def createService(self, **kwargs):
        """
        Create a new Application

        Args:
            body, Service: Message-Body (optional)

            

        Returns: Service
        """

        allParams = ['body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createService" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Service')
        return responseObject
        

        

    def getService(self, ID, **kwargs):
        """
        Read a Application by a given ID

        Args:
            ID, str: Unique ID (required)

            relations, bool: If set to true, all relations of the Fact Sheet are fetched as well. Fetching all relations can be slower. Default: false. (optional)

            

        Returns: Service
        """

        allParams = ['ID', 'relations']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getService" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('relations' in params):
            queryParams['relations'] = self.apiClient.toPathValue(params['relations'])
        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Service')
        return responseObject
        

        

    def updateService(self, ID, **kwargs):
        """
        Update a Application by a given ID

        Args:
            ID, str: Unique ID (required)

            body, Service: Message-Body (optional)

            

        Returns: Service
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateService" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Service')
        return responseObject
        

        

    def deleteService(self, ID, **kwargs):
        """
        Delete a Application by a given ID

        Args:
            ID, str: Unique ID (required)

            

        Returns: 
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteService" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getFactSheetHasParents(self, ID, **kwargs):
        """
        Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[FactSheetHasParent]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasParents" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasParents'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[FactSheetHasParent]')
        return responseObject
        

        

    def createFactSheetHasParent(self, ID, **kwargs):
        """
        Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, FactSheetHasParent: Message-Body (optional)

            

        Returns: FactSheetHasParent
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createFactSheetHasParent" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasParents'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasParent')
        return responseObject
        

        

    def getFactSheetHasParent(self, ID, relationID, **kwargs):
        """
        Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: FactSheetHasParent
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasParent" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasParents/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasParent')
        return responseObject
        

        

    def updateFactSheetHasParent(self, ID, relationID, **kwargs):
        """
        Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, FactSheetHasParent: Message-Body (optional)

            

        Returns: FactSheetHasParent
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateFactSheetHasParent" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasParents/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasParent')
        return responseObject
        

        

    def deleteFactSheetHasParent(self, ID, relationID, **kwargs):
        """
        Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteFactSheetHasParent" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasParents/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getFactSheetHasChildren(self, ID, **kwargs):
        """
        Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[FactSheetHasChild]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasChildren" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasChildren'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[FactSheetHasChild]')
        return responseObject
        

        

    def createFactSheetHasChild(self, ID, **kwargs):
        """
        Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, FactSheetHasChild: Message-Body (optional)

            

        Returns: FactSheetHasChild
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createFactSheetHasChild" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasChildren'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasChild')
        return responseObject
        

        

    def getFactSheetHasChild(self, ID, relationID, **kwargs):
        """
        Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: FactSheetHasChild
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasChild" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasChildren/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasChild')
        return responseObject
        

        

    def updateFactSheetHasChild(self, ID, relationID, **kwargs):
        """
        Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, FactSheetHasChild: Message-Body (optional)

            

        Returns: FactSheetHasChild
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateFactSheetHasChild" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasChildren/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasChild')
        return responseObject
        

        

    def deleteFactSheetHasChild(self, ID, relationID, **kwargs):
        """
        Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteFactSheetHasChild" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasChildren/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getFactSheetHasDocuments(self, ID, **kwargs):
        """
        Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[FactSheetHasDocument]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasDocuments" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasDocuments'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[FactSheetHasDocument]')
        return responseObject
        

        

    def createFactSheetHasDocument(self, ID, **kwargs):
        """
        Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, FactSheetHasDocument: Message-Body (optional)

            

        Returns: FactSheetHasDocument
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createFactSheetHasDocument" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasDocuments'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasDocument')
        return responseObject
        

        

    def getFactSheetHasDocument(self, ID, relationID, **kwargs):
        """
        Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: FactSheetHasDocument
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasDocument" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasDocuments/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasDocument')
        return responseObject
        

        

    def updateFactSheetHasDocument(self, ID, relationID, **kwargs):
        """
        Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, FactSheetHasDocument: Message-Body (optional)

            

        Returns: FactSheetHasDocument
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateFactSheetHasDocument" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasDocuments/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasDocument')
        return responseObject
        

        

    def deleteFactSheetHasDocument(self, ID, relationID, **kwargs):
        """
        Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteFactSheetHasDocument" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasDocuments/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getFactSheetHasLifecycles(self, ID, **kwargs):
        """
        Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[FactSheetHasLifecycle]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasLifecycles" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasLifecycles'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[FactSheetHasLifecycle]')
        return responseObject
        

        

    def createFactSheetHasLifecycle(self, ID, **kwargs):
        """
        Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, FactSheetHasLifecycle: Message-Body (optional)

            

        Returns: FactSheetHasLifecycle
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createFactSheetHasLifecycle" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasLifecycles'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasLifecycle')
        return responseObject
        

        

    def getFactSheetHasLifecycle(self, ID, relationID, **kwargs):
        """
        Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: FactSheetHasLifecycle
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasLifecycle" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasLifecycles/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasLifecycle')
        return responseObject
        

        

    def updateFactSheetHasLifecycle(self, ID, relationID, **kwargs):
        """
        Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, FactSheetHasLifecycle: Message-Body (optional)

            

        Returns: FactSheetHasLifecycle
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateFactSheetHasLifecycle" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasLifecycles/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasLifecycle')
        return responseObject
        

        

    def deleteFactSheetHasLifecycle(self, ID, relationID, **kwargs):
        """
        Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteFactSheetHasLifecycle" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasLifecycles/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getUserSubscriptions(self, ID, **kwargs):
        """
        Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[UserSubscription]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getUserSubscriptions" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/userSubscriptions'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[UserSubscription]')
        return responseObject
        

        

    def createUserSubscription(self, ID, **kwargs):
        """
        Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, UserSubscription: Message-Body (optional)

            

        Returns: UserSubscription
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createUserSubscription" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/userSubscriptions'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'UserSubscription')
        return responseObject
        

        

    def getUserSubscription(self, ID, relationID, **kwargs):
        """
        Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: UserSubscription
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getUserSubscription" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/userSubscriptions/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'UserSubscription')
        return responseObject
        

        

    def updateUserSubscription(self, ID, relationID, **kwargs):
        """
        Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, UserSubscription: Message-Body (optional)

            

        Returns: UserSubscription
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateUserSubscription" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/userSubscriptions/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'UserSubscription')
        return responseObject
        

        

    def deleteUserSubscription(self, ID, relationID, **kwargs):
        """
        Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteUserSubscription" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/userSubscriptions/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getFactSheetHasPredecessors(self, ID, **kwargs):
        """
        Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[FactSheetHasPredecessor]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasPredecessors" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasPredecessors'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[FactSheetHasPredecessor]')
        return responseObject
        

        

    def createFactSheetHasPredecessor(self, ID, **kwargs):
        """
        Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, FactSheetHasPredecessor: Message-Body (optional)

            

        Returns: FactSheetHasPredecessor
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createFactSheetHasPredecessor" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasPredecessors'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasPredecessor')
        return responseObject
        

        

    def getFactSheetHasPredecessor(self, ID, relationID, **kwargs):
        """
        Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: FactSheetHasPredecessor
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasPredecessor" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasPredecessors/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasPredecessor')
        return responseObject
        

        

    def updateFactSheetHasPredecessor(self, ID, relationID, **kwargs):
        """
        Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, FactSheetHasPredecessor: Message-Body (optional)

            

        Returns: FactSheetHasPredecessor
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateFactSheetHasPredecessor" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasPredecessors/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasPredecessor')
        return responseObject
        

        

    def deleteFactSheetHasPredecessor(self, ID, relationID, **kwargs):
        """
        Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteFactSheetHasPredecessor" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasPredecessors/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getFactSheetHasSuccessors(self, ID, **kwargs):
        """
        Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[FactSheetHasSuccessor]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasSuccessors" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasSuccessors'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[FactSheetHasSuccessor]')
        return responseObject
        

        

    def createFactSheetHasSuccessor(self, ID, **kwargs):
        """
        Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, FactSheetHasSuccessor: Message-Body (optional)

            

        Returns: FactSheetHasSuccessor
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createFactSheetHasSuccessor" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasSuccessors'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasSuccessor')
        return responseObject
        

        

    def getFactSheetHasSuccessor(self, ID, relationID, **kwargs):
        """
        Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: FactSheetHasSuccessor
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasSuccessor" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasSuccessors/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasSuccessor')
        return responseObject
        

        

    def updateFactSheetHasSuccessor(self, ID, relationID, **kwargs):
        """
        Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, FactSheetHasSuccessor: Message-Body (optional)

            

        Returns: FactSheetHasSuccessor
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateFactSheetHasSuccessor" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasSuccessors/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasSuccessor')
        return responseObject
        

        

    def deleteFactSheetHasSuccessor(self, ID, relationID, **kwargs):
        """
        Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteFactSheetHasSuccessor" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasSuccessors/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getFactSheetHasRequiresAll(self, ID, **kwargs):
        """
        Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[FactSheetHasRequires]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasRequiresAll" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasRequires'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[FactSheetHasRequires]')
        return responseObject
        

        

    def createFactSheetHasRequires(self, ID, **kwargs):
        """
        Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, FactSheetHasRequires: Message-Body (optional)

            

        Returns: FactSheetHasRequires
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createFactSheetHasRequires" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasRequires'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasRequires')
        return responseObject
        

        

    def getFactSheetHasRequires(self, ID, relationID, **kwargs):
        """
        Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: FactSheetHasRequires
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasRequires" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasRequires/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasRequires')
        return responseObject
        

        

    def updateFactSheetHasRequires(self, ID, relationID, **kwargs):
        """
        Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, FactSheetHasRequires: Message-Body (optional)

            

        Returns: FactSheetHasRequires
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateFactSheetHasRequires" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasRequires/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasRequires')
        return responseObject
        

        

    def deleteFactSheetHasRequires(self, ID, relationID, **kwargs):
        """
        Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteFactSheetHasRequires" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasRequires/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getFactSheetHasRequiredByAll(self, ID, **kwargs):
        """
        Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[FactSheetHasRequiredby]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasRequiredByAll" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasRequiredby'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[FactSheetHasRequiredby]')
        return responseObject
        

        

    def createFactSheetHasRequiredby(self, ID, **kwargs):
        """
        Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, FactSheetHasRequiredby: Message-Body (optional)

            

        Returns: FactSheetHasRequiredby
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createFactSheetHasRequiredby" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasRequiredby'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasRequiredby')
        return responseObject
        

        

    def getFactSheetHasRequiredby(self, ID, relationID, **kwargs):
        """
        Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: FactSheetHasRequiredby
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasRequiredby" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasRequiredby/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasRequiredby')
        return responseObject
        

        

    def updateFactSheetHasRequiredby(self, ID, relationID, **kwargs):
        """
        Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, FactSheetHasRequiredby: Message-Body (optional)

            

        Returns: FactSheetHasRequiredby
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateFactSheetHasRequiredby" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasRequiredby/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasRequiredby')
        return responseObject
        

        

    def deleteFactSheetHasRequiredby(self, ID, relationID, **kwargs):
        """
        Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteFactSheetHasRequiredby" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasRequiredby/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getServiceHasBusinessCapabilities(self, ID, **kwargs):
        """
        Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[ServiceHasBusinessCapability]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getServiceHasBusinessCapabilities" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasBusinessCapabilities'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[ServiceHasBusinessCapability]')
        return responseObject
        

        

    def createServiceHasBusinessCapability(self, ID, **kwargs):
        """
        Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, ServiceHasBusinessCapability: Message-Body (optional)

            

        Returns: ServiceHasBusinessCapability
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createServiceHasBusinessCapability" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasBusinessCapabilities'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasBusinessCapability')
        return responseObject
        

        

    def getServiceHasBusinessCapability(self, ID, relationID, **kwargs):
        """
        Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: ServiceHasBusinessCapability
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getServiceHasBusinessCapability" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasBusinessCapabilities/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasBusinessCapability')
        return responseObject
        

        

    def updateServiceHasBusinessCapability(self, ID, relationID, **kwargs):
        """
        Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, ServiceHasBusinessCapability: Message-Body (optional)

            

        Returns: ServiceHasBusinessCapability
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateServiceHasBusinessCapability" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasBusinessCapabilities/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasBusinessCapability')
        return responseObject
        

        

    def deleteServiceHasBusinessCapability(self, ID, relationID, **kwargs):
        """
        Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteServiceHasBusinessCapability" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasBusinessCapabilities/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getServiceHasProcesses(self, ID, **kwargs):
        """
        Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[ServiceHasProcess]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getServiceHasProcesses" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasProcesses'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[ServiceHasProcess]')
        return responseObject
        

        

    def createServiceHasProcess(self, ID, **kwargs):
        """
        Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, ServiceHasProcess: Message-Body (optional)

            

        Returns: ServiceHasProcess
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createServiceHasProcess" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasProcesses'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasProcess')
        return responseObject
        

        

    def getServiceHasProcess(self, ID, relationID, **kwargs):
        """
        Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: ServiceHasProcess
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getServiceHasProcess" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasProcesses/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasProcess')
        return responseObject
        

        

    def updateServiceHasProcess(self, ID, relationID, **kwargs):
        """
        Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, ServiceHasProcess: Message-Body (optional)

            

        Returns: ServiceHasProcess
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateServiceHasProcess" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasProcesses/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasProcess')
        return responseObject
        

        

    def deleteServiceHasProcess(self, ID, relationID, **kwargs):
        """
        Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteServiceHasProcess" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasProcesses/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getServiceHasConsumers(self, ID, **kwargs):
        """
        Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[ServiceHasConsumer]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getServiceHasConsumers" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasConsumers'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[ServiceHasConsumer]')
        return responseObject
        

        

    def createServiceHasConsumer(self, ID, **kwargs):
        """
        Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, ServiceHasConsumer: Message-Body (optional)

            

        Returns: ServiceHasConsumer
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createServiceHasConsumer" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasConsumers'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasConsumer')
        return responseObject
        

        

    def getServiceHasConsumer(self, ID, relationID, **kwargs):
        """
        Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: ServiceHasConsumer
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getServiceHasConsumer" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasConsumers/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasConsumer')
        return responseObject
        

        

    def updateServiceHasConsumer(self, ID, relationID, **kwargs):
        """
        Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, ServiceHasConsumer: Message-Body (optional)

            

        Returns: ServiceHasConsumer
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateServiceHasConsumer" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasConsumers/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasConsumer')
        return responseObject
        

        

    def deleteServiceHasConsumer(self, ID, relationID, **kwargs):
        """
        Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteServiceHasConsumer" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasConsumers/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getServiceHasBusinessObjects(self, ID, **kwargs):
        """
        Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[ServiceHasBusinessObject]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getServiceHasBusinessObjects" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasBusinessObjects'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[ServiceHasBusinessObject]')
        return responseObject
        

        

    def createServiceHasBusinessObject(self, ID, **kwargs):
        """
        Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, ServiceHasBusinessObject: Message-Body (optional)

            

        Returns: ServiceHasBusinessObject
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createServiceHasBusinessObject" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasBusinessObjects'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasBusinessObject')
        return responseObject
        

        

    def getServiceHasBusinessObject(self, ID, relationID, **kwargs):
        """
        Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: ServiceHasBusinessObject
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getServiceHasBusinessObject" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasBusinessObjects/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasBusinessObject')
        return responseObject
        

        

    def updateServiceHasBusinessObject(self, ID, relationID, **kwargs):
        """
        Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, ServiceHasBusinessObject: Message-Body (optional)

            

        Returns: ServiceHasBusinessObject
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateServiceHasBusinessObject" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasBusinessObjects/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasBusinessObject')
        return responseObject
        

        

    def deleteServiceHasBusinessObject(self, ID, relationID, **kwargs):
        """
        Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteServiceHasBusinessObject" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasBusinessObjects/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getServiceHasInterfaces(self, ID, **kwargs):
        """
        Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[ServiceHasInterface]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getServiceHasInterfaces" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasInterfaces'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[ServiceHasInterface]')
        return responseObject
        

        

    def createServiceHasInterface(self, ID, **kwargs):
        """
        Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, ServiceHasInterface: Message-Body (optional)

            

        Returns: ServiceHasInterface
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createServiceHasInterface" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasInterfaces'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasInterface')
        return responseObject
        

        

    def getServiceHasInterface(self, ID, relationID, **kwargs):
        """
        Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: ServiceHasInterface
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getServiceHasInterface" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasInterfaces/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasInterface')
        return responseObject
        

        

    def updateServiceHasInterface(self, ID, relationID, **kwargs):
        """
        Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, ServiceHasInterface: Message-Body (optional)

            

        Returns: ServiceHasInterface
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateServiceHasInterface" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasInterfaces/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasInterface')
        return responseObject
        

        

    def deleteServiceHasInterface(self, ID, relationID, **kwargs):
        """
        Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteServiceHasInterface" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasInterfaces/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getServiceHasProjects(self, ID, **kwargs):
        """
        Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[ServiceHasProject]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getServiceHasProjects" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasProjects'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[ServiceHasProject]')
        return responseObject
        

        

    def createServiceHasProject(self, ID, **kwargs):
        """
        Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, ServiceHasProject: Message-Body (optional)

            

        Returns: ServiceHasProject
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createServiceHasProject" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasProjects'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasProject')
        return responseObject
        

        

    def getServiceHasProject(self, ID, relationID, **kwargs):
        """
        Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: ServiceHasProject
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getServiceHasProject" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasProjects/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasProject')
        return responseObject
        

        

    def updateServiceHasProject(self, ID, relationID, **kwargs):
        """
        Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, ServiceHasProject: Message-Body (optional)

            

        Returns: ServiceHasProject
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateServiceHasProject" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasProjects/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasProject')
        return responseObject
        

        

    def deleteServiceHasProject(self, ID, relationID, **kwargs):
        """
        Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteServiceHasProject" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasProjects/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getServiceHasResources(self, ID, **kwargs):
        """
        Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[ServiceHasResource]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getServiceHasResources" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasResources'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[ServiceHasResource]')
        return responseObject
        

        

    def createServiceHasResource(self, ID, **kwargs):
        """
        Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, ServiceHasResource: Message-Body (optional)

            

        Returns: ServiceHasResource
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createServiceHasResource" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasResources'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasResource')
        return responseObject
        

        

    def getServiceHasResource(self, ID, relationID, **kwargs):
        """
        Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: ServiceHasResource
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getServiceHasResource" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasResources/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasResource')
        return responseObject
        

        

    def updateServiceHasResource(self, ID, relationID, **kwargs):
        """
        Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, ServiceHasResource: Message-Body (optional)

            

        Returns: ServiceHasResource
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateServiceHasResource" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasResources/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ServiceHasResource')
        return responseObject
        

        

    def deleteServiceHasResource(self, ID, relationID, **kwargs):
        """
        Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteServiceHasResource" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/serviceHasResources/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getFactSheetHasIfaceProviders(self, ID, **kwargs):
        """
        Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[FactSheetHasIfaceProvider]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasIfaceProviders" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasIfaceProviders'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[FactSheetHasIfaceProvider]')
        return responseObject
        

        

    def createFactSheetHasIfaceProvider(self, ID, **kwargs):
        """
        Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, FactSheetHasIfaceProvider: Message-Body (optional)

            

        Returns: FactSheetHasIfaceProvider
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createFactSheetHasIfaceProvider" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasIfaceProviders'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasIfaceProvider')
        return responseObject
        

        

    def getFactSheetHasIfaceProvider(self, ID, relationID, **kwargs):
        """
        Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: FactSheetHasIfaceProvider
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasIfaceProvider" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasIfaceProviders/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasIfaceProvider')
        return responseObject
        

        

    def updateFactSheetHasIfaceProvider(self, ID, relationID, **kwargs):
        """
        Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, FactSheetHasIfaceProvider: Message-Body (optional)

            

        Returns: FactSheetHasIfaceProvider
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateFactSheetHasIfaceProvider" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasIfaceProviders/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasIfaceProvider')
        return responseObject
        

        

    def deleteFactSheetHasIfaceProvider(self, ID, relationID, **kwargs):
        """
        Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteFactSheetHasIfaceProvider" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasIfaceProviders/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def getFactSheetHasIfaceConsumers(self, ID, **kwargs):
        """
        Read all of relation

        Args:
            ID, str: Unique ID (required)

            

        Returns: Array[FactSheetHasIfaceConsumer]
        """

        allParams = ['ID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasIfaceConsumers" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasIfaceConsumers'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[FactSheetHasIfaceConsumer]')
        return responseObject
        

        

    def createFactSheetHasIfaceConsumer(self, ID, **kwargs):
        """
        Create a new relation

        Args:
            ID, str: Unique ID (required)

            body, FactSheetHasIfaceConsumer: Message-Body (optional)

            

        Returns: FactSheetHasIfaceConsumer
        """

        allParams = ['ID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createFactSheetHasIfaceConsumer" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasIfaceConsumers'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasIfaceConsumer')
        return responseObject
        

        

    def getFactSheetHasIfaceConsumer(self, ID, relationID, **kwargs):
        """
        Read by relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: FactSheetHasIfaceConsumer
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getFactSheetHasIfaceConsumer" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasIfaceConsumers/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasIfaceConsumer')
        return responseObject
        

        

    def updateFactSheetHasIfaceConsumer(self, ID, relationID, **kwargs):
        """
        Update relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            body, FactSheetHasIfaceConsumer: Message-Body (optional)

            

        Returns: FactSheetHasIfaceConsumer
        """

        allParams = ['ID', 'relationID', 'body']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateFactSheetHasIfaceConsumer" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasIfaceConsumers/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        if ('' in params):
            bodyParam = params['']
        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'FactSheetHasIfaceConsumer')
        return responseObject
        

        

    def deleteFactSheetHasIfaceConsumer(self, ID, relationID, **kwargs):
        """
        Delete relation by a given relationID

        Args:
            ID, str: Unique ID (required)

            relationID, str: Unique ID of the Relation (required)

            

        Returns: 
        """

        allParams = ['ID', 'relationID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method deleteFactSheetHasIfaceConsumer" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/services/{ID}/factSheetHasIfaceConsumers/{relationID}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}
        formParams = {}
        bodyParam = None

        if ('ID' in params):
            replacement = str(self.apiClient.toPathValue(params['ID']))
            resourcePath = resourcePath.replace('{' + 'ID' + '}',
                                                replacement)
        if ('relationID' in params):
            replacement = str(self.apiClient.toPathValue(params['relationID']))
            resourcePath = resourcePath.replace('{' + 'relationID' + '}',
                                                replacement)
        if formParams:
            headerParams['Content-type'] = 'application/x-www-form-urlencoded'

        # postData = (formParams if formParams else bodyParam)
        postData = params['body'] if 'body' in params else None

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    




